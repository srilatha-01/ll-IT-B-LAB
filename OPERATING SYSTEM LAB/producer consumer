AIM : Write and execute producer consumer problem using semaphores and execute it

ALGORITHM :
do{
//produce an item
wait(empty);
wait(mutex);
//place in buffer
signal(mutex);
signal(full);
}while(true)

Solution for Consumer:
do{
wait(full);
wait(mutex);
// remove item from buffer
signal(mutex);
signal(empty);
// consumes item
}while(true)

PROGRAM : 

#include <stdio.h>
#include<stdlib.h>
int mutex = 1;
int full = 0;
int empty=5, x=0;
void producer(){
    --mutex;
    ++full;
    --empty;
    x++;
    printf("Producer produces item %d\n",x);
    ++mutex;
}
void consumer(){
    --mutex;
    --full;
    ++empty;
    printf("Consumer consumes item : %d\n",x);
    x--;
    ++mutex;
}
int main()
{
    int n, i;
    printf("1. Press 1 for Producer\n2. Press 2 for Consumer\n3. Press 3 for Exit\n");
    // Using '#pragma omp parallel for can  give wrong value due to synchronisation issues.
    // 'critical' specifies that code is executed by only one thread at a time i.e., only one thread enters the critical section at a given time
    #pragma omp critical
    for (i = 1; i > 0; i++) {
        printf("Enter your choice : ");
        scanf("%d", &n);
        switch (n) {
        case 1:
            if ((mutex == 1)
                && (empty != 0)) {
                producer();
            }
            else {
                printf("Buffer is FULL!\n");
            }
            break;
  
        case 2:
            if ((mutex == 1)
                && (full != 0)) {
                consumer();
            }
            else {
                printf("Buffer is EMPTY!\n");
            }
            break;
        case 3:
            exit(0);
            break;
        }
    }
    return 0;
}
